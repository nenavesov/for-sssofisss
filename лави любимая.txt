#include <stdio.h>
#include <time.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <raylib.h>

// DEFINES
#define CELL_SIZE 10
#define WORLD_WIDTH	 1000
#define WORLD_HEIGHT 1000
#define COLOR_ACTIVE  RED
#define COLOR_INACTIVE  BLACK

// STRUCT
typedef struct
{
	uint64_t x, y;
	bool	 active;
} Cell;

typedef struct
{
	uint64_t w, h;
	Cell	 cells[WORLD_WIDTH / CELL_SIZE][WORLD_HEIGHT / CELL_SIZE];
} World;

// PROTOTYPE FUNCTIONS
void	showCell(Cell c);
void	showWorld(World w);
uint8_t countNeighbors(World w, Cell c);
void	processWorld(World* w, World wCopied);

int main(){
    
	srand(time(NULL));

	InitWindow(1920, 1080, "Game of life");
    
    int logoPositionX = 1920/2 - 128;
    int logoPositionY = 1080/2 - 128;

    int framesCounter = 0;
    int lettersCount = 0;

    int topSideRecWidth = 16;
    int leftSideRecHeight = 16;

    int bottomSideRecWidth = 16;
    int rightSideRecHeight = 16;

    int state = 0;                  // Tracking animation states (State Machine)
    float alpha = 1.0f;
    
	SetTargetFPS(60);

	// ! INIT WOLRD
	World w1 = { .w = 750 / CELL_SIZE, .h = WORLD_HEIGHT / CELL_SIZE };

	// INIT CELLS as randomly active or not
	for (uint64_t x = 20; x < w1.w; x++){
		for (uint64_t y = 1; y < w1.h; y++)
		{
			w1.cells[x][y] = (Cell){
				.x		= x,
				.y		= y,
				.active = rand() % 2,
			};
		}
	}

	w1.cells[0][0].active = true;

	while (!WindowShouldClose()){
        if (state == 0)                 // State 0: Small box blinking
        {
            framesCounter++;

            if (framesCounter == 120)
            {
                state = 1;
                framesCounter = 0;      // Reset counter... will be used later...
            }
        }
        else if (state == 1)            // State 1: Top and left bars growing
        {
            topSideRecWidth += 4;
            leftSideRecHeight += 4;

            if (topSideRecWidth == 256) state = 2;
        }
        else if (state == 2)            // State 2: Bottom and right bars growing
        {
            bottomSideRecWidth += 4;
            rightSideRecHeight += 4;

            if (bottomSideRecWidth == 256) state = 3;
        }
        else if (state == 3)            // State 3: Letters appearing (one by one)
        {
            framesCounter++;

            if (framesCounter/12)       // Every 12 frames, one more letter!
            {
                lettersCount++;
                framesCounter = 0;
            }

            if (lettersCount >= 10)     // When all letters have appeared, just fade out everything
            {
                alpha -= 0.02f;

                if (alpha <= 0.0f)
                {
                    alpha = 0.0f;
                    state = 4;
                }
            }
        }
        
		BeginDrawing(); // ! DRAWING
        ClearBackground(WHITE);
        if (state == 0)
            {
                if ((framesCounter/15)%2) DrawRectangle(logoPositionX, logoPositionY, 16, 16, BLACK);
            }
            else if (state == 1)
            {
                DrawRectangle(logoPositionX, logoPositionY, topSideRecWidth, 16, BLACK);
                DrawRectangle(logoPositionX, logoPositionY, 16, leftSideRecHeight, BLACK);
            }
            else if (state == 2)
            {
                DrawRectangle(logoPositionX, logoPositionY, topSideRecWidth, 16, BLACK);
                DrawRectangle(logoPositionX, logoPositionY, 16, leftSideRecHeight, BLACK);

                DrawRectangle(logoPositionX + 240, logoPositionY, 16, rightSideRecHeight, BLACK);
                DrawRectangle(logoPositionX, logoPositionY + 240, bottomSideRecWidth, 16, BLACK);
            }
            else if (state == 3)
            {
                DrawRectangle(logoPositionX, logoPositionY, topSideRecWidth, 16, Fade(BLACK, alpha));
                DrawRectangle(logoPositionX, logoPositionY + 16, 16, leftSideRecHeight - 32, Fade(BLACK, alpha));

                DrawRectangle(logoPositionX + 240, logoPositionY + 16, 16, rightSideRecHeight - 32, Fade(BLACK, alpha));
                DrawRectangle(logoPositionX, logoPositionY + 240, bottomSideRecWidth, 16, Fade(BLACK, alpha));

                DrawRectangle(GetScreenWidth()/2 - 112, GetScreenHeight()/2 - 112, 224, 224, Fade(WHITE, alpha));

                DrawText(TextSubtext("raylib", 0, lettersCount), GetScreenWidth()/2 - 44, GetScreenHeight()/2 + 48, 50, Fade(BLACK, alpha));
            }
            else if (state == 4)
            {
                ClearBackground(WHITE);
                DrawRectangle(395, 0, 5, 1900, RED);
                DrawRectangle(1490,0, 5, 1900, RED);
                DrawLine(400,9,1490,9, RED);
                DrawLine(400,1079,1490,1079, RED);

                showWorld(w1);
                processWorld(&w1, w1);
            }

		EndDrawing(); // ! END DRAWING
	}
	CloseWindow();
}

void showCell(Cell c){
    
	Color color_;
	if (c.active)
	{
		color_ = COLOR_ACTIVE;
		DrawRectangleRec(
		  (Rectangle){
			.x		= c.x * 20,
			.y		= c.y * 20,
			.width	= CELL_SIZE,
			.height = CELL_SIZE,
		  },
		  color_);
	}
}

void showWorld(World w){
    
	for (uint64_t x = 0; x < w.w; x++)
	{
		for (uint64_t y = 0; y < w.h; y++)
		{
			showCell(w.cells[x][y]);
		}
	}
}


uint8_t countNeighbors(World w, Cell c){
    
	uint8_t neighborsCount = 0;
	int64_t row, col;
	uint8_t res = WORLD_WIDTH / CELL_SIZE;

	for (int x = -1; x < 2; x++)
	{
		for (int y = -1; y < 2; y++)
		{
			col = (c.x + x + res) % res;
			row = (c.y + y + res) % res;
			neighborsCount += w.cells[col][row].active;
		}
	}

	// Remove itself cause it's counted
	neighborsCount -= w.cells[c.x][c.y].active;
	return neighborsCount;
}

void processWorld(World* w, World wCopied){
    
	uint8_t	 n;
	Cell*	 pc;
	uint32_t killed	 = 0;
	uint32_t spawned = 0;
	uint32_t kept	 = 0;

	for (uint64_t x = 0; x < w->w; x++)
	{
		for (uint64_t y = 0; y < w->h; y++)
		{
			pc = &w->cells[x][y];			   // pointer Cell
			n  = countNeighbors(wCopied, *pc); // Read from copied world

			// Change States
			if (pc->active && (n < 2))
			{
				pc->active = false;
				killed++;
			} // Underpopulation
			else if (pc->active && (n > 3))
			{
				pc->active = false;
				killed++;
			} // Overpopulation
			else if (pc->active && ((n == 2) || (n == 3)))
			{
				pc->active = true;
				kept++;
			} // Normal
			else if ((pc->active == false) && (n == 3))
			{
				pc->active = true;
				spawned++;
			} // Reproduction
		}
	}
}